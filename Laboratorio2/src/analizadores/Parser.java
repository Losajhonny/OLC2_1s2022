
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\024\000\002\002\004\000\002\002\003\000\002\005" +
    "\003\000\002\006\004\000\002\006\003\000\002\007\005" +
    "\000\002\007\003\000\002\003\003\000\002\010\005\000" +
    "\002\010\003\000\002\011\003\000\002\011\003\000\002" +
    "\012\003\000\002\013\005\000\002\013\003\000\002\004" +
    "\003\000\002\014\004\000\002\014\003\000\002\015\003" +
    "\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\011\000\006\010\006\011\004\001\002\000\010\002" +
    "\uffee\010\uffee\011\uffee\001\002\000\004\002\013\001\002" +
    "\000\010\002\uffef\010\uffef\011\uffef\001\002\000\010\002" +
    "\ufff0\010\ufff0\011\ufff0\001\002\000\004\002\000\001\002" +
    "\000\010\002\ufff2\010\006\011\004\001\002\000\010\002" +
    "\ufff1\010\ufff1\011\ufff1\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\011\000\012\002\004\004\007\014\010\015\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\011\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  

    public void mostrar(String out) {
        System.out.println(out);
    }

    public int getVal(String num) {
        return Integer.parseInt(num);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= ini3 
            {
              Nodo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ini1 ::= listaA 
            {
              Nodo RESULT =null;
		int Lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo L = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 mostrar("La cantidad de pares de paréntesis es " + L.cont); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ini1",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listaA ::= listaA deA 
            {
              Nodo RESULT =null;
		int L1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int L1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo L1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo A = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    L1.cont = L1.cont + A.cont;
                                    RESULT = L1;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaA",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // listaA ::= deA 
            {
              Nodo RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo A = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = A; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaA",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // deA ::= PIZQ deA PDER 
            {
              Nodo RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo A = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                    A.cont = A.cont + 1;
                                    RESULT = A;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("deA",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // deA ::= LETRA 
            {
              Nodo RESULT =null;
		
                                    Nodo nodo = new Nodo();
                                    nodo.cont = 0;
                                    RESULT = nodo;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("deA",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ini2 ::= listaLD 
            {
              Nodo RESULT =null;
		int Lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo L = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 mostrar(L.cad); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ini2",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // listaLD ::= listaLD COMA deB 
            {
              Nodo RESULT =null;
		int Lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo L = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo A = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                L.cad = L.cad + "," + A.cad;
                                                RESULT = L;
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaLD",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // listaLD ::= deB 
            {
              Nodo RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo A = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                RESULT = A;
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaLD",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // deB ::= listaLetra 
            {
              Nodo RESULT =null;
		int LLleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int LLright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo LL = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                RESULT = LL;
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("deB",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // deB ::= listaNumero 
            {
              Nodo RESULT =null;
		int LDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int LDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo LD = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                LD.cad = LD.val + "";
                                                RESULT = LD;
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("deB",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // listaLetra ::= LETRA 
            {
              Nodo RESULT =null;
		int letraleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int letraright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String letra = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                Nodo nodo = new Nodo();
                                                nodo.cad = letra;
                                                RESULT = nodo;
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaLetra",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // listaNumero ::= listaNumero PTCOMA NUMERO 
            {
              Nodo RESULT =null;
		int Ld1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int Ld1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo Ld1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int digleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int digright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String dig = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                Ld1.val = Ld1.val + getVal(dig);
                                                RESULT = Ld1;
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaNumero",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // listaNumero ::= NUMERO 
            {
              Nodo RESULT =null;
		int digleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int digright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String dig = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                Nodo nodo = new Nodo();
                                                nodo.val = getVal(dig);
                                                RESULT = nodo;
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaNumero",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ini3 ::= listaBin 
            {
              Nodo RESULT =null;
		int Lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo L = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 mostrar(L.val + ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ini3",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // listaBin ::= listaBin bin 
            {
              Nodo RESULT =null;
		int Lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo L = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 L.val = L.val * 2 + b.val; RESULT = L; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaBin",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // listaBin ::= bin 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaBin",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bin ::= CERO 
            {
              Nodo RESULT =null;
		 Nodo nodo = new Nodo(); nodo.val = 0; RESULT = nodo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bin ::= UNO 
            {
              Nodo RESULT =null;
		 Nodo nodo = new Nodo(); nodo.val = 1; RESULT = nodo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
